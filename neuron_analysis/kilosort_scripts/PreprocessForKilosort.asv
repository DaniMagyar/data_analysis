function PreprocessForKilosort(varargin)

% This function removes artefacts from recording and applies channel map.

%  INPUT: 
% - pLength: length of the artefact in ms. Default is 5ms.
% - extracut: extra time cutted before and after the artefact in ms. Default 1ms
% - lastTS: Last TimeStamp included (default: end of the recording)
% - experiment: 'PFC_BA_doubleLaser' / 'M2_shock_laser'

prs =  inputParser;
addOptional(prs,'pLength',2,@isnumeric) 
addOptional(prs,'extracut',1,@isnumeric)
addOptional(prs,'lastTS',0,@isnumeric) 
addOptional(prs, 'experiment', '', @ischar)
addOptional(prs, 'source', 'none', @ischar)
addParameter(prs,'CHmap','none',@ischar)
parse(prs,varargin{:})
g = prs.Results;

switch g.source
    case 'oebin'
        info = load_open_ephys_binary([cd '\structure.oebin'],'continuous',1, 'mmap');
        disp('Selected source: OEBIN')
    case 'dat' % in this case, timestamps files must be overwrited and 'events' folder copied into cd
        folder = cd;
        info.Header.num_channels = 64;
        contFile=fullfile(folder,'continuous.dat');
        file=dir(contFile);
        samples=file.bytes/2/info.Header.num_channels;
        info.Data=memmapfile(contFile,'Format',{'int16' [info.Header.num_channels samples] 'mapped'});
        info.Timestamps = readNPY(fullfile(folder,'timestamps.npy'));
        info.Timestamps = info.Timestamps(1:samples);
        disp('Selected source: DAT')
    case 'none'
        error('read_openephys: Unknown source.')
end

switch g.CHmap
    case 'none'
        error('No channel map selected')
    case 'preordered'
        channel_map = [1:64];
        disp('Selected channel map: PREORDERED')
    case 'A1x32'
        channel_map = [1 17 16 32 3 19 14 30 9 25 10 20 8 24 2 29 7 26 15 21 11 23 12 28 6 18 13 22 5 27 4 31];
        disp('Selected channel map: A1x32')
    case 'Buzs32'
        channel_map = [31 26 27 21 22 23 18 28 29 17 24 32 20 19 25 30 1 2 16 8 3 10 14 9 7 4 15 5 11 13 12 6];
        disp('Selected channel map: Buzs32')
    case 'Cambridge64_H2'
        channel_map = [3 1 31 28 30 23 7 5 25 6 8 29 27 32 2 4 9 11 14 16 18 20 22 24 26 21 19 17 15 13 12 10 56 54 51 49 47 45 43 41 39 44 46 48 50 52 53 55 62 64 34 37 35 42 58 60 40 59 57 36 38 33 63 61];
        disp('Selected channel map: Cambridge64_H2')
    case 'Cambridge64_H7_Adpt_NNx'
        channel_map = [3 10 1 12 31 13 28 15 30 17 23 19 7 21 5 26 25 24 6 22 8 20 29 18 27 16 32 14 2 11 4 9 56 61 54 63 51 33 49 38 47 36 45 57 43 59 41 40 39 60 44 58 46 42 48 35 50 37 52 34 53 64 55 62];
        disp('Selected channel map: Cambridge64_H7_Adpt_NNx')
    case 'Cambridge64_H7_Adpt_Cambridge'
        channel_map = [14 64 13 63 12 62 7 61 6 60 57 59 1 58 2 8 9 56 15 55 16 54 11 53 10 52 5 51 4 50 3 49 48 30 47 29 46 28 45 23 44 22 43 17 42 18 41 24 25 31 39 32 38 40 37 27 36 26 35 21 34 20 33 19];
        disp('Selected channel map: Cambridge64_H7_Adpt_Cambridge')
    case 'Cambridge64_P1'
        channel_map = [23 3 7 1 5 31 25 28 6 30 8 29 27 32 2 4 20 9 22 11 24 14 26 16 21 18 19 17 15 13 12 10 45 56 43 54 41 51 39 49 44 47 46 48 50 52 53 55 42 62 58 64 60 34 40 37 59 35 57 36 38 33 63 61];
        disp('Selected channel map: Cambridge64_P1')
    otherwise
        error('read_openephys: Unknown channel map.')
end  


if g.lastTS > 0
    lastEL = find(info.Timestamps==g.lastTS*30000);
else
    lastEL = length(info.Timestamps);
end

% initialize a big matrix for the data
incoming_data = zeros(info.Header.num_channels,length(info.Timestamps(1:lastEL)),'int16');
% load data
for ii = 1:info.Header.num_channels
    [next_channel] = info.Data.Data(1).mapped(channel_map(ii),1:lastEL);
    incoming_data(ii,:)=int16(next_channel);
    disp(['CH ' num2str(channel_map(ii)) ' loaded'])
end

%% Remove artefacts
if g.pLength ~= 0
    channel_states = readNPY([cd '\events\Rhythm_FPGA-100.0\TTL_1\channel_states.npy']);
    channels = readNPY([cd '\events\Rhythm_FPGA-100.0\TTL_1\channels.npy']);
    timestamps = double(readNPY([cd '\events\Rhythm_FPGA-100.0\TTL_1\timestamps.npy']));
    
    for jj = 1:max(channels)
        TTL_ON = find(channel_states==int16(jj));
        TTL_channels{1,jj*2-1} = ['CH' num2str(jj) 'ON'];
        TTL_channels{2,jj*2-1} = timestamps(TTL_ON);
        
        TTL_OFF = find(channel_states==-int16(jj));
        TTL_channels{1,jj*2} = ['CH' num2str(jj) 'OFF'];
        TTL_channels{2,jj*2} = timestamps(TTL_OFF);
    end
    
    switch g.experiment
        case 'PFC_ChETA'
            pulses = sort([TTL_channels{2,5}]); % 5:blue ON
        case 'PFC_BA_doubleLaser'
            pulses = sort([TTL_channels{2,3}; TTL_channels{2,4}; TTL_channels{2,5}]); % 3:yellow ON, 4:yellow OFF, 5:blue ON
        case 'M2_shock_laser'
            pulses = sort([TTL_channels{2,3}; TTL_channels{2,5}; TTL_channels{2,6}]); % 3: 5 ms shock ON, 5: laser ON, 6:laser OFF
        case 'M2_shock_only'
            pulses = sort([TTL_channels{2,1}]);
        otherwise 
            error('unknown experiment')
    end
    if g.lastTS > 0
        pulses = pulses(pulses<g.lastTS*30000);
    end
    
    for ll = 1:info.Header.num_channels
        
        for kk = 1:numel(pulses)
            pStamp = find(info.Timestamps==pulses(kk)); % timestamp of current pulse
            incoming_data(ll,pStamp-g.extracut*30:pStamp+(g.pLength+g.extracut)*30) = ...
                int16(linspace(double(incoming_data(ll,pStamp-g.extracut*30)), ...
                double(incoming_data(ll,pStamp+(g.pLength+g.extracut)*30)), ...
                numel(incoming_data(ll,pStamp-g.extracut*30:pStamp+(g.pLength+g.extracut)*30))));
            disp(['CH' num2str(ll) ' / artefact ' num2str(kk) '/' num2str(numel(pulses)) ' removed'])
        end
    end
end


% for kk = 1:numel(pulses)
%     pStamp = find(info.Timestamps==pulses(kk)); % timestamp of current pulse
%     incoming_data(:,pStamp-g.extracut*30:pStamp+(g.pLength+g.extracut)*30) = 0;
%     disp(['artefact ' num2str(kk) '/' num2str(numel(pulses)) ' removed'])
% end

%initialize a new .dat file
fid=fopen(['continuous_Preprocessed_' g.CHmap '_pLength' num2str(g.pLength) '_extracut' num2str(g.extracut) '.dat'],'w+');
% write data to raw .dat file
fwrite(fid,incoming_data(:,:),'int16');
% close that file
fclose(fid);
disp('done')